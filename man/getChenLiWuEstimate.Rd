% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getChenLiWuEstimate.R
\name{getChenLiWuEstimate}
\alias{getChenLiWuEstimate}
\title{Chen-Li-Wu Doubly Robust Estimator}
\usage{
getChenLiWuEstimate(
  LIST.input = NULL,
  formula = NULL,
  weight = NULL,
  population = NULL
)
}
\arguments{
\item{LIST.input}{This parameter corresponds to the probability and non-probability samples. The input must be a list containing two matrix-like data types (i.e. matrix, dataframe or tibble), called probability.sample and non.probability.sample. A value must be specified here for the function call to be successful.}

\item{formula}{This parameter corresponds to the specification of the response and predictor variables. The input must be an expression of the form y ~ model, where y represents the response variable and model represents the predictor variables (each predictor is separated by the + operator). The response variable must be in the non-probability sample, and the predictor variables must be contained in both the probability and non-probability samples. A value must be specified here for the function call to be successful.}

\item{weight}{This parameter corresponds to the column in the probability sample that contains the sampling weights. The input must be a string corresponding to a column name in probability.sample, such that there are only positive numbers in that column. A value must be specified here for initialization to be successful.}

\item{population}{This parameter corresponds to the total population that the probability and non-probability samples are taken from. The input must be a matrix-like data type (i.e. matrix, dataframe or tibble), which contains the response and predictor variables, unique identifiers (under ‘ID’), and the true self-selection propensities (under ‘propensity’). A value must be specified here for the function call to be successful.}
}
\value{
The getChenLiWuEstimate function returns a list, which contains the following calculated values: the total population estimate (called estimate); the propensity correlation (called cor.propensity); and the response correlation (called cor.response).
}
\description{
The getChenLiWuEstimate function implements the Chen-Li-Wu Doubly Robust estimator, developed by Yilin Chen, Pengfei Li and Changbao Wu. Like nppCART, this function can be used to estimate the self-selection propensities and total population of a non-probability sample, using relevant auxillary information from a probability sample. However, it uses a different method (Doubly Robust estimator), and is provided in this package so that the user can compare results between the two algorithms.
}
\examples{
# Set population size
N <- 1000;

# Create population
DF.population <- data.frame(
    ID = seq(1,N),
    y = jitter(rep(10,N)),
    x1 = jitter(rep(1,N)),
    x2 = jitter(rep(1,N)),
    propensity = jitter(rep(0.2,N))
    );

# Get non-probability sample
DF.non.probability <- DF.population;
DF.non.probability[,"self.select"] <- sapply(
    X   = DF.non.probability[,"propensity"],
    FUN = function(x) { sample( x = c(0,1), size = 1, prob = c(1-x,x) ) }
    );
DF.non.probability <- DF.non.probability[1 == DF.non.probability[,"self.select"], c("ID","y","x1","x2")];
   
# Set the probability of selection
prob.selection <- 0.1;

# Get probability sample
is.selected <- sample(
    x       = c(TRUE,FALSE),
    size    = nrow(DF.population),
    replace = TRUE,
    prob    = c(prob.selection, 1 - prob.selection)
    );
DF.probability <- DF.population[is.selected,c("ID","x1","x2")];
DF.probability[,"weight"] <- 1 / prob.selection;  

# Create LIST.samples
LIST.samples <- list(
    probability.sample = DF.probability, 
    non.probability.sample = DF.non.probability
    );

# getChenLiWuEstimate: calculate population estimate, propensity correlation and response correlation
results.CLW <- getChenLiWuEstimate(
    LIST.input = LIST.samples,
    formula    = y ~ x1 + x2,
    weight     = "weight",
    population = DF.population
    );

Y_total_hat_CLW    <- results.CLW[["estimate"]];
cor_propensity_CLW <- results.CLW[["cor.propensity"]];
cor_response_CLW   <- results.CLW[["cor.response"]];

}
